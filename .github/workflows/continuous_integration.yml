name: "Continuous Integration"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  initialization:
    name: Initialization
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ echo -n env.pythonLocation | openssl sha256 }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --upgrade --upgrade-strategy eager -e .[lint]
        pip install --upgrade --upgrade-strategy eager -e .[docs]
        pip install --upgrade --upgrade-strategy eager -e .[setup]
        pip install --upgrade --upgrade-strategy eager -e .[package]
        pip install --upgrade --upgrade-strategy eager -e .[tests]
  linting:
    name: Linting
    needs: initialization
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --upgrade --upgrade-strategy eager -e .[lint]
    - name: Linting
      run: |
        flake8 . --count --statistics --ignore=E501,F403,F405
        pylint pydtmc --disable=C0103,C0114,C0116,C0301,C0302,C0415,E1101,I1101,R0801,R0903,R0904,R0912,R0913,R0914,R0915,R1702,W0212,W0611,W0613,W0632,W0703
        pylint tests --disable=C0103,C0301,C0114,C0116,R0801,R0913,R0914,W0123,W0611,W0703
  documentation:
    name: Documentation
    needs: linting
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --upgrade --upgrade-strategy eager -e .[docs]
    - name: Documentation
      run: make -C docs/ html
  build:
    name: Build
    needs: documentation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --upgrade --upgrade-strategy eager -e .[setup]
    - name: Build
      run: python setup.py sdist bdist_wheel
  testing_coverage:
    name: Testing & Coverage
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Libraries Installation
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt-get -q update
          sudo apt-get -y install graphviz
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install graphviz
        else
          brew install graphviz
        fi
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Python Cache
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}
    - name: Dependencies Installation
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt --use-feature=in-tree-build
        pip install --upgrade --upgrade-strategy eager -e .[package]
        pip install --upgrade --upgrade-strategy eager -e .[tests]
    - name: Testing & Coverage
      env:
        COVERALLS_SERVICE_NAME: github-actions
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        pytest --cov=pydtmc tests/
        codecov
        coveralls
