name: Package Publishing

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target:'
        required: true

jobs:
  publishing:
    name: Publishing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        language: [ python ]
    steps:
    - name: Repository Checkout
      uses: actions/checkout@v2
    - name: Python Setup
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
        architecture: x64
    - name: Version Bump
      id: bump
      env:
        TARGET: ${{ github.event.inputs.target }}
        VERSION_FILE: pydtmc/__init__.py
        VERSION_REGEX: __version__[[:space:]]=[[:space:]]'[[:digit:]]\.[[:digit:]]\.[[:digit:]]'
        VERSION: none
        VERSION_MAJOR: 0
        VERSION_MINOR: 0
        VERSION_RELEASE: 0
        VERSION_NEW: none
      run: |
        TARGET=${TARGET^^}
        if [[ $TARGET != 'MAJOR' ]] && [[ $TARGET != 'MINOR' ]] && [[ $TARGET != 'RELEASE' ]]; then
          echo 'INVALID INPUT'
          exit 1
        fi
        grep $VERSION_REGEX $VERSION_FILE
        VERSION=$(grep $VERSION_REGEX $VERSION_FILE | cut -d "'" -f2)
        VERSION_MAJOR=$(echo $VERSION | cut -d "." -f1)
        VERSION_MINOR=$(echo $VERSION | cut -d "." -f2)
        VERSION_RELEASE=$(echo $VERSION | cut -d "." -f3)
        if [[ $TARGET == 'MAJOR' ]]; then
          VERSION_MAJOR=$(($VERSION_MAJOR + 1))
          VERSION_MINOR=0
          VERSION_RELEASE=0
        elif [[ $TARGET == 'MINOR' ]]; then
          VERSION_MINOR=$(($VERSION_MINOR + 1))
          VERSION_RELEASE=0
        else
          VERSION_RELEASE=$(($VERSION_RELEASE + 1))
        fi
        VERSION_NEW=$(printf '%d.%d.%d' $VERSION_MAJOR $VERSION_MINOR $VERSION_RELEASE 2>/dev/null)
        sed -i "s/$VERSION_REGEX/__version__ = '$VERSION_NEW'/g" $VERSION_FILE
        grep $VERSION_REGEX $VERSION_FILE
        echo "::set-output name=VERSION::$VERSION_NEW"
    - name: Dependencies Installation
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt --use-feature=in-tree-build
        pip install setuptools
        pip install wheel
        pip install twine
        conda update conda
        conda install conda-build anaconda-client
        conda update conda-build anaconda-client
    - name: PyPI Publishing - Build
      run: python setup.py sdist bdist_wheel
    - name: PyPI Publishing - Upload
      env:
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload dist/*
    - name: Conda Publishing - SHA256
      env:
        VERSION: ${{ steps.bump.outputs.VERSION }}
        SHA256: none
        SHA256_FILE: meta.yaml
        SHA256_REGEX: sha256_placeholder
      run: |
        sleep 1m
        wget https://pypi.io/packages/source/P/PyDTMC/PyDTMC-$VERSION.tar.gz -O /tmp/PyDTMC-$VERSION.tar.gz
        SHA256=$(openssl sha256 /tmp/PyDTMC-$VERSION.tar.gz | awk '{print $2}')
        grep $SHA256_REGEX $SHA256_FILE
        sed -i "s/$SHA256_REGEX/$SHA256/g" $SHA256_FILE
        grep $SHA256 $SHA256_FILE
    - name: Conda Publishing - Build & Upload
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
        conda config --set anaconda_upload yes
        conda build . --output-folder /tmp/conda-build
    - name: Version Commit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.bump.outputs.VERSION }}
        VERSION_FILE: pydtmc/__init__.py
      run: |
        git config --local user.name "${{ secrets.BOT_USERNAME }}"
        git config --local user.email "${{ secrets.BOT_EMAIL }}"
        git add $VERSION_FILE
        git commit -m "Package Publishing $VERSION"
        git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}
        git push
